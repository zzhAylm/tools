package com.zzh.jvm;

/**
 * @Description: 内存溢出和内存泄漏
 * @Author: zzh
 * @Crete 2023/2/10 09:21
 */
public class Jvm29 {

    /**
     * 内存溢出： 没有空闲内存，并且垃圾收集器也无法提供更多的内存 ，OOM之前会进行一次GC
     *
     * 内存泄漏： 只有对象不会被程序用到了，但是Gc有不能回收他们的情况，才叫做内存泄漏
     *
     *  内存泄漏的例子：
     *   单例模式的对象，生命周期很长，如果持有某个外部对象的引用，那个这个外部对象就不能被回收，造成内存泄漏
     *   一些书库库的链接和IO链接，网络链接我们必须手动关闭，否则不会被回收，造成内存泄漏
     *
     * Stop-the-world : 指的是GC事件发生的过程中，会产生应用的停顿，停顿产生时整个应用程序会被暂停，没有任何的响应，优点像卡死的感觉，这个就称为STW
     *
     *
     * 垃圾收集时，用户线程停顿时间
     *
     * 并行与并发：
     *
     * 并发： 单核cpu，同时运行多个进程，看似并行的执行，（在一个时间段上同时发生了）
     *
     * 并行：当有多核cpu的时候，同时有多个进程执行，（决定并行的不是cpu的数量，而是cpu的核心数量，单个cpu也可以有多个核心，就可以并行执行）（在一个时间点上同时发生）
     *
     *
     * 并发的多个任务是相互相互抢占资源
     * 并行的多个任务是不会相互抢占资源的
     *
     * */

    /**
     * 安全点： 程序并使在任意的地方都可以停下来，然后进行gc，只有在某些特定的点用户线程才可以停下来，然后gc，这特定的点就是安全点
     * 用户线程可以在此位置停止，系统进行gc，的时候认为系统是安全的，在这个点认为gc的时候 认为用户线程安全
     *
     * 安全区域：用户线程可以停止的一个区域，系统进行gc
     *
     * */
    public static void main(String[] args) {





    }
}
