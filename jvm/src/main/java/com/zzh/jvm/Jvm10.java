package com.zzh.jvm;

/**
 * @Description: 栈（虚拟机栈）
 *
 * @Author: zzh
 * @Crete 2023/1/29 14:45
 */
public class Jvm10 {

    // 栈和堆
    // 线程私有的
    // stack frame
    // 栈是运行时的单位，堆是存储的单位
    public static void main(String[] args) {
        // 栈中存放着栈帧，每一次方法的调用都会增加一个栈帧，一个栈帧对应一个 方法，保存局部变量（八种基本数据类型和对象引用的地址）
        // 不存在gc ，存在 OOM
        // 异常：OutOfMemoryError (栈或者堆的内存是可扩展的，扩展到的时候如果是无法申请到内存，则爆初OutOfMemoryError)
        // StackOverflowError （固定栈的大小，当栈中的数据超过栈的内存，则爆初StackOverflowError）

        // -Xss1024k 设置栈内存的大小
        // -Xms6G ： 堆内存最小内存
        // -Xmx6G : 堆内存最大内存
        // -Xmn2G ： 新生代大小
        // javap -v xxx.class  反编译字节文件

        // 一个方法对应一个栈帧，一个栈帧是一个数据集，维系这方法执行过程中的各种数据信息
        // 方法的结束方式： 1.正常返回，以return命令结束。   2.方法中有未捕获的异常，以抛出异常的方法结束

        // 栈帧中存储的内容： 局部变量表，操作数栈（表达式栈），动态链接（指向运行时常量池的方法引用），方法返回地址（方法正常退出或异常退出的定义），以一些附加信息
        // 栈帧的组成：局部变量表，操作数栈，动态链接，方法返回值

        // 局部变量表的介绍：
            // 局部变量表是数组类型， 编译的时候就可以确定局部变量表的长度， 栈帧的大小主要有局部变量表的大小决定

            // slot 槽：局部变量表的基本存储单位，32为以内的变量栈一个槽，64为的占两个槽

            //变量的分类：
                    // 基本数据类型和引用数据类型
                    // 成员变量和局部变量， 成员变量包括（类变量和实例变量）

            // 类变量和局部变量的区别/静态变量和局部变量的区别：
                // 类变量：在linking的prepare阶段，给类变量默认赋值，initial阶段显示赋值
                // 实例变量：随着对象的创建，会在对空间进行赋值，并进行默认赋值
                // 局部变量：在使用前，必须进行显示赋值，否则编译不通过，

            // 栈帧，局部变量表中的变量是垃圾回收根结点，只要被局部变量表中直接或者间接引用的对象，就不会被gc回收



        //操作数栈：
            // 操作数栈使用数组实现的， 执行引擎将字节吗指令翻译成机器指令，通过操作数栈，计算结果
            // 操作数栈的深度，在编译阶段就确定了

        //动态链接：（帧数据区包含方法返回地址，动态链接，一些附加信息）
            // 动态链接，指向运行时常量池中的引用    ，指向方法（方法启动的时候会加载到运行时常量池中）的一个引用

        //方法返回地址：


        //一些附加信息：
    }
}
